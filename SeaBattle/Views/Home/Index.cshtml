@model DateViewModel
<!DOCTYPE html>
<html>
<head>
    <title>Sea Battles</title>
    <link rel="stylesheet" asp-href-include="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" asp-href-include="~/css/site.css" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>
<body>
    <div class="container" style="margin-top:50px">
        <div class="row">
            <div class="col-lg-5 battlefield battlefield__self battlefield__wait">
                <div class="battlefield-gap">
                    <table class="battlefield-table" style="margin-left:105px;float:left">
                        <tbody>

                            @for (int i = 0; i < GameCore.Field.Size; i++)
                            {
                                <tr class="battlefield-row">
                                    @for (int j = 0; j < GameCore.Field.Size; j++)
                                    {
                                        if (Model.fieldPlayer[i, j] == 0)
                                        {
                                            <td class="battlefield-cell battlefield-cell__empty">
                                                <div class="battlefield-cell-content" data-y="@i" data-x="@j"></div>
                                            </td>
                                        }
                                        else if (Model.fieldPlayer[i, j] == 1)
                                        {
                                            <td class="battlefield-cell battlefield-cell__busy">
                                                <div class="battlefield-cell-content" data-y="@i" data-x="@j">
                                                </div>
                                            </td>
                                        }
                                    }
                                </tr>
                            }

                        </tbody>
                    </table>
                    <div class="battlefield-start" style="right:-50%">
                        <div class="battlefield-start-choose_rival-label text-info">SeaBattle</div>

                    </div>
                </div>
            </div>

            <div class="col-lg-5 battlefield battlefield__rival battlefield__wait" id="enemy">
                <div class="battlefield-gap">
                    <table class="battlefield-table" style="margin-right:105px;float:right">
                        <tbody>
                            @for (int i = 0; i < GameCore.Field.Size; i++)
                            {
                                <tr class="battlefield-row">
                                    @for (int j = 0; j < GameCore.Field.Size; j++)
                                    {

                                        <td class="battlefield-cell battlefield-cell__empty">
                                            <div class="battlefield-cell-content" data-y="@i" data-x="@j"></div>
                                        </td>

                                    }
                                </tr>
                            }
                        </tbody>

                    </table>
                    <div class="battlefield-start">
                        <div class="battlefield-start-choose_rival-label"><input type="text" readonly id="connectionIDtxt" class="form-control" onclick="this.select();" style="width:75%" /></div><br />
                        <div class="battlefield-start-choose_rival-label"><input type="button" value="Play" id="connectBtn" class="btn" /></div>
                    </div>
                </div>

            </div>

        </div>

        <input type="button" value="Go" id="myButton" />



    </div>
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script>
    //Connect hub (SIGNALR Core....)
        //TODO CHANGE ALL JS SHITS IN JQUERY


        var newValue;
        var oldValue;
        var _connectionId;
        function ReadyStart(Yes) {
            if (Yes) {
                $(".battlefield-start").addClass("none");
                $(".battlefield__rival").removeClass("battlefield__wait").addClass("battlefield__start");
            } else {
                $(".battlefield-start").removeClass("none");
                $(".battlefield__rival").addClass("battlefield__wait").removeClass("battlefield__start");
            }
        }
        function YourTurn(Yes) {
            if (Yes) {
                $(".battlefield__self").addClass("battlefield__wait");
                $(".battlefield__rival").removeClass("battlefield__wait");
            } else {
                $(".battlefield__self").removeClass("battlefield__wait");
                $(".battlefield__rival").addClass("battlefield__wait");
            }
        }
         function GetValue(x, y) {
          @for (int i = 0; i < GameCore.Field.Size; i++)
           {

               @for (int j = 0; j < GameCore.Field.Size; j++)
               {
                   <text>


             if (@i == y && @j == x) {
                 return  @Model.fieldPlayer[i, j];
                    }
                  </text>
               }
             }
        }

        $(".battlefield__rival tr td.battlefield-cell__empty").click(function (e) {
            newValue = 0;
            let currentElement = $(this);
            let x = currentElement.children().data("x");
            let y = currentElement.children().data("y");
            
            console.log(x, y);
            hubConnection.invoke("SendCordinateEnemy", x, y, _connectionId);//GetValue

            setTimeout(SetStatusColor, 100, currentElement);                  
        });
        function SetStatusColor(currentElement) {
            console.log(newValue);
            switch (newValue) {
                case 2:
                    currentElement.removeClass("battlefield-cell__empty").removeClass("battlefield-cell__busy").addClass("battlefield-cell__shoot");
                    break;
                case -1:
                    currentElement.removeClass("battlefield-cell__empty").removeClass("battlefield-cell__busy").addClass("battlefield-cell__missed");
                    break;
                default:
            }
            currentElement.attr("disabled", "disabled").off('click');
        }
        function changeurl(connectionID) {
            var new_url = "https://localhost:44392/?id=" + connectionID;
            window.history.pushState("data", "Title", new_url);
            return new_url;
        }

        function getRandomConnectionID() {
            return Math.floor(Math.random() * 88888888) + 10000000;//get random connectionID 10000000-99999999
        }
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/seabattle")
            .build();


        hubConnection.on("Notify", function (message) {
            console.log(message);
        });
        //TODO FIX
        hubConnection.on("SendRequestTakeValue", function (x, y, connectionId) {
             oldValue = GetValue(x, y);
            console.log("SendRequestTakeValue  value = " + oldValue);

            hubConnection.invoke("SendStatus", oldValue, x, y, connectionId);
        });
        hubConnection.on("TakeStatus", function (_newValue) {      
            newValue = _newValue;
            console.log("TakeStatus " + newValue)
        });

        hubConnection.on("SetStatus", function (_newValue, x, y, connectionId) {
            newValue = _newValue;
            let currentElement = $(".battlefield__self tr td.battlefield-cell .battlefield-cell-content[data-x='" + x + "'][data-y='" + y + "']");
            SetStatusColor(currentElement.parent());

        });
        document.getElementById("connectBtn").addEventListener("click", function (e) {
            hubConnection.invoke("Enter", _connectionId);
        });
        hubConnection.on("GetConnectionID", function (connectionID) {
            console.log("ID: " + connectionID);
        });
        hubConnection.start();

            window.onload = function () {
                @if (Model.ConnectionID!=null)
                {
                <text>
                _connectionId = @Model.ConnectionID;
                </text>
            }
            else
            {
                <text>
               _connectionId = getRandomConnectionID();
                </text>
            }

                let textBox = $("#connectionIDtxt");
                textBox.attr("value", changeurl(_connectionId));//changeurl and return new url to value TextBox
                textBox.attr("data-value", _connectionId);
            }
            //setTimeout(ConnectWithExistGroup, 500);//SetTimeout->For First ConnectHub... tick tack... Second->ConnectGroup

    </script>
</body>
</html>